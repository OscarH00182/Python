Avengers=['thor','iron man','Capatain America']
print(Avengers)
print(Avengers[0])
print(Avengers[0].title())
print(Avengers[-1])
message = "My favorite Avenger is " + Avengers[1].title()
print(message)

#Excerises 3-1 to 3-3
"""
Store the names of a few of your friends in a list called names. Print
each person’s name by accessing each element in the list, one at a time.
"""
print("\n3-1")
friends = ['daniel','alan','oscar']
print(friends[0])
print(friends[1])
print(friends[2])


"""
Start with the list you used in Exercise 3-1, but instead of just
printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the
person’s name
"""
print("\n3-2")
message0 = "hello "+friends[0]+" how are you!"
message1 = "hello "+friends[1]+" how are you"
message2 = "hello "+friends[2]+" how are you"
print(message0)
print(message1)
print(message2)
"""
Think of your favorite mode of transportation, such as a
motorcycle or a car, and make a list that stores several examples. Use your list
to print a series of statements about these items, such as “I would like to own a
Honda motorcycle.
"""
print("\n3-3")
transportation = ['cars','bikes']
message = transportation[0].title() + " are the best way to get around."
message0 = " I love riding " + transportation[1]
print(message, message0)

cars = ['honda','toyota','ford']
print(cars)
cars[0]='jeep'
print("\n",cars)

#append
cars.append('honda')
print(cars)

colors = []
colors.append('red')
colors.append('blue')
print("\n",colors)

#inserting in Lists
colors.insert(0,'yellow')
print(colors)

#deleting in Lists
del colors[1]
print(colors)

#popping in Lists
motorcycles = ['honda','yamaha','suzuki']
print("\n",motorcycles)#prints out entire list
popped_motorcycles = motorcycles.pop()#popped_mo.. is last value popped, also pops val
print(motorcycles)
print(popped_motorcycles)#prints value that was popped

#We can pop certain values using index!
poppedIndex = motorcycles.pop(0)
print("\nValue at Index[0]:",poppedIndex)

#As well as using value!
print("Before deletion",motorcycles)
value = motorcycles.remove('yamaha')
print("After deletion: ",motorcycles)

"""
If you could invite anyone, living or deceased, to dinner, who
would you invite? Make a list that includes at least three people you’d like to
invite to dinner. Then use your list to print a message to each person, inviting
them to dinner
"""
print("\n3-4")
friends = ['Drake','Trump','MJ','Aliens']
print(friends)

"""
You just heard that one of your guests can’t make the
dinner, so you need to send out a new set of invitations. You’ll have to think of
someone else to invite.
•	 Start with your program from Exercise 3-4. Add a print statement at the
end of your program stating the name of the guest who can’t make it.
•	 Modify your list, replacing the name of the guest who can’t make it with
the name of the new person you are inviting.
•	 Print a second set of invitation messages, one for each person who is still
in your list.
"""
print("\n3-5")
cantCome = friends[1]
print(cantCome," cant make it")
friends[1] = 'Arnold'
print("New list: ",friends)

"""
 You just found a bigger dinner table, so now more space is
available. Think of three more guests to invite to dinner.
•	 Start with your program from Exercise 3-4 or Exercise 3-5. Add a print
statement to the end of your program informing people that you found a
bigger dinner table.
•	 Use insert() to add one new guest to the beginning of your list.
•	 Use insert() to add one new guest to the middle of your list.
•	 Use append() to add one new guest to the end of your list.
•	 Print a new set of invitation messages, one for each person in your list.
"""

print("\n3-6  ")
print(friends," we found a bigger table!")
friends.insert(0,'bob')
friends.insert(3,'steve')
friends.append('chief')
print(friends)

"""
You just found out that your new dinner table won’t
arrive in time for the dinner, and you have space for only two guests.
•	 Start with your program from Exercise 3-6. Add a new line that prints a
message saying that you can invite only two people for dinner.
•	 Use pop() to remove guests from your list one at a time until only two
names remain in your list. Each time you pop a name from your list, print
a message to that person letting them know you’re sorry you can’t invite
them to dinner.
•	 Print a message to each of the two people still on your list, letting them
know they’re still invited.
•	 Use del to remove the last two names from your list, so you have an empty
list. Print your list to make sure you actually have an empty list at the end
of your program.
"""
print("\n3-7")
print("Sorry, ",friends.pop(0)," you cant go!")
print("Sorry, ",friends.pop(1)," you cant go!")
print("Sorry, ",friends.pop(2)," you cant go!")
print("Sorry, ",friends.pop(3)," you cant go!")
print("Sorry, ",friends.pop(-1)," you cant go!")
print("Only, ",friends," can go!")
del friends
friends = []
print(friends)

#sorting
numbers =[5,3,8,2,5,76,1,4]
numbers.sort()#sort works with numbers and alaph order
print("\n",numbers)

#reverse sorting
numbers.sort(reverse=True)#sets numbers in reverse
print(numbers)

#using sort functiom
print("\nBefore using sorted function: ",numbers)
print("using sorted functions: ",sorted(numbers))#sorted function is only temp
print("After using sorted function: ",numbers)

#reversing function
list = sorted(numbers)
print("\n",list)
list.reverse()
print(list)

#getting length of list
print("\nLength of list: ",len(list))

"""
Think of at least five places in the world you’d like to
visit.
•	 Store the locations in a list. Make sure the list is not in alphabetical order.
•	 Print your list in its original order. Don’t worry about printing the list neatly,
just print it as a raw Python list.
•	 Use sorted() to print your list in alphabetical order without modifying the
actual list.
•	 Show that your list is still in its original order by printing it.
•	 Use sorted() to print your list in reverse alphabetical order without changing the order of the original list.
•	 Show that your list is still in its original order by printing it again.
•	 Use reverse() to change the order of your list. Print the list to show that its
order has changed.
•	 Use reverse() to change the order of your list again. Print the list to show
it’s back to its original order.
•	 Use sort() to change your list so it’s stored in alphabetical order. Print the
list to show that its order has been changed.
•	 Use sort() to change your list so it’s stored in reverse alphabetical order.
Print the list to show that its order has changed.
"""
print("\n3-8")
destinations = ['new york','dallas','denver','reno','nashville']
print(destinations)
print(sorted(destinations))
print(destinations)
destinations.reverse()
print("Reverse Function:",destinations)
destinations.reverse()
print("Reverse Function Again:",destinations)
destinations.sort()
print("Final Sort: ",destinations)

"""
Working with one of the programs from Exercises 3-4
through 3-7 (page 46), use len() to print a message indicating the number
of people you are inviting to dinner
"""
print("\n3-9")
print(len(friends))

"""
Think of something you could store in a list. For example, you could make a list of mountains, 
rivers, countries, cities, languages, or anything else you’d like. Write a program that 
creates a list containing these items and then uses each function introduced in this 
chapter at least once
"""
print("\n3-10")
city = ['Los Angeles','San Diego','Anaheim','Seattle']
print("Sorted Function",sorted(city))#sorts temporary
city.reverse()#permenately sets list in reverse order
print("Reverse Function",city)
city.sort()
print("Sort Function",city)
print("Length Function",len(city))

